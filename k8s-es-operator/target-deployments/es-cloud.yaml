# This sample sets up an Elasticsearch cluster with 3 nodes.
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  #uncomment the lines below to copy the specified node labels as pod annotations and use it as an environment variable in the Pods
  annotations:
   eck.k8s.elastic.co/downward-node-labels: "topology.kubernetes.io/zone"
  name: es-api-cluster
spec:
  version: 8.2.2
  auth:
    fileRealm:
      - secretName: filerealm-secret-es-admin-auth
  nodeSets:
  - name: default
    config:
      # most Elasticsearch configuration parameters are possible to set, e.g: node.attr.attr_name: attr_value
      node.roles: ["master", "data", "ingest", "ml"]
      # this allows ES to run on nodes even if their vm.max_map_count has not been increased, at a performance cost
      node.store.allow_mmap: true
      # uncomment the lines below to use the zone attribute from the node labels
      cluster.routing.allocation.awareness.attributes: k8s_node_name,zone
      node.attr.zone: ${ZONE}
    podTemplate:
      metadata:
        labels:
          # additional labels for pods
          foo: bar
      spec:
        # this changes the kernel setting on the node to allow ES to use mmap
        # if you uncomment this init container you will likely also want to remove the
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
        ###
        # uncomment the line below if you are using a service mesh such as linkerd2 that uses service account tokens for pod identification.
        # automountServiceAccountToken: true
        containers:
        - name: elasticsearch
          # specify resource limits and requests
          resources:
            limits:
              memory: 4Gi
              cpu: 2
          env:
            - name: ZONE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['topology.kubernetes.io/zone']
            - name: ES_JAVA_OPTS
              value: "-Xms2g -Xmx2g"
        topologySpreadConstraints:
         - maxSkew: 1
           topologyKey: topology.kubernetes.io/zone
           whenUnsatisfiable: DoNotSchedule
           labelSelector:
             matchLabels:
               elasticsearch.k8s.elastic.co/cluster-name: elasticsearch-sample
               elasticsearch.k8s.elastic.co/statefulset-name: elasticsearch-sample-es-default
    count: 3
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data # Do not change this name unless you set up a volume mount for the data path.
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: gp2
  # inject secure settings into Elasticsearch nodes from k8s secrets references
  # secureSettings:
  # - secretName: ref-to-secret
  # - secretName: another-ref-to-secret
  #   # expose only a subset of the secret keys (optional)
  #   entries:
  #   - key: value1
  #     path: newkey # project a key to a specific path (optional)
  http:
    service:
      spec:
        # expose this cluster Service with a LoadBalancer
        type: LoadBalancer
    tls:
      selfSignedCertificate:
        # add a list of SANs into the self-signed HTTP certificate
        subjectAltNames:
        - ip: 192.168.1.2
        - ip: 192.168.1.3
        - dns: elasticsearch-sample.example.com
      # certificate:
      #   # provide your own certificate
      #   secretName: my-cert
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: kb-es-cluster
spec:
  version: 8.2.2
  count: 2
  config:
     monitoring.ui.ccs.enabled: false
  elasticsearchRef:
    name: "es-api-cluster"
  http:
   service:
     spec:
       type: LoadBalancer
  podTemplate:
    metadata:
      labels:
        foo: bar
    spec:
      containers:
      - name: kibana
        resources:
          limits:
            memory: 1Gi
            cpu: 1.5
---
apiVersion: apm.k8s.elastic.co/v1
kind: ApmServer
metadata:
  name: apm-es-cloud
spec:
  version: 8.2.0
  count: 1
  elasticsearchRef:
    name: "es-api-cluster"
  # this allows ECK to configure automatically the Kibana endpoint as described in https://www.elastic.co/guide/en/apm/server/current/setup-kibana-endpoint.html
  kibanaRef:
    name: "kb-es-cluster"
---
kind: Secret
apiVersion: v1
metadata:
  name: filerealm-secret-es-admin-auth
stringData:
  users: |-
    naviteq:$2a$10$deoY2/HykRigXIZ09Op64uTnMZBuWDSy5/GWz9tPNlmny9cQePUq.
  users_roles: |-
    admin:naviteq
    superuser:naviteq